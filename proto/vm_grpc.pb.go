// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/vm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMPlugin_Start_FullMethodName = "/proto.VMPlugin/Start"
	VMPlugin_Stop_FullMethodName  = "/proto.VMPlugin/Stop"
	VMPlugin_Info_FullMethodName  = "/proto.VMPlugin/Info"
)

// VMPluginClient is the client API for VMPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMPluginClient interface {
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type vMPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewVMPluginClient(cc grpc.ClientConnInterface) VMPluginClient {
	return &vMPluginClient{cc}
}

func (c *vMPluginClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VMPlugin_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPluginClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VMPlugin_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPluginClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VMPlugin_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMPluginServer is the server API for VMPlugin service.
// All implementations must embed UnimplementedVMPluginServer
// for forward compatibility.
type VMPluginServer interface {
	Start(context.Context, *Empty) (*Response, error)
	Stop(context.Context, *Empty) (*Response, error)
	Info(context.Context, *Empty) (*Response, error)
	mustEmbedUnimplementedVMPluginServer()
}

// UnimplementedVMPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMPluginServer struct{}

func (UnimplementedVMPluginServer) Start(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedVMPluginServer) Stop(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedVMPluginServer) Info(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedVMPluginServer) mustEmbedUnimplementedVMPluginServer() {}
func (UnimplementedVMPluginServer) testEmbeddedByValue()                  {}

// UnsafeVMPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMPluginServer will
// result in compilation errors.
type UnsafeVMPluginServer interface {
	mustEmbedUnimplementedVMPluginServer()
}

func RegisterVMPluginServer(s grpc.ServiceRegistrar, srv VMPluginServer) {
	// If the following call pancis, it indicates UnimplementedVMPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMPlugin_ServiceDesc, srv)
}

func _VMPlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMPlugin_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPluginServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMPlugin_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPluginServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPlugin_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPluginServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMPlugin_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPluginServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VMPlugin_ServiceDesc is the grpc.ServiceDesc for VMPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VMPlugin",
	HandlerType: (*VMPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _VMPlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _VMPlugin_Stop_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _VMPlugin_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vm.proto",
}
